require 'date'
require 'digest/sha1'

module OpenSesame

  # Used for generating time-sensitive, cryptographically secure authorization tokens.
  class Token
    # For really lazy people.  You really should set your own secret phrase.
    @@default_secret = "OPEN SESAME"

    # Generate a token, which will automatically expire after one hour.
    #
    # @param [String] secret The shared secret, which should only be known by the
    #   sender and the receiver.
    # @param [DateTime] timestamp Expire the token automatically one hour from this time.
    #   Defaults to now.
    # @return [String] The token.
    def self.generate(secret = @@default_secret, timestamp = Time.now.utc.to_datetime)
      timestamp_string = timestamp.strftime('%Y%m%dT%H%M')
      hash = (Digest::SHA1.new << secret + timestamp_string).to_s
      timestamp_string + '-' + hash
    end

    # Verify a token.
    #
    # @param [String] token The token.
    # @param [String] secret The shared secret.
    def self.verify(token, secret = @@default_secret)
      string = token.split /-/
      timestamp = DateTime.strptime string.first, '%Y%m%dT%H%M'
      one_hour_ago = (Time.now.utc - 3600).to_datetime
      (timestamp >= one_hour_ago) && token.eql?(generate(secret, timestamp))
    end

  end

  # Used for passing messages that cannot be altered.  This is not for hiding a message
  # from observers.  The message is cryptographically signed but it is not encrypted.
  class Message
    @@default_secret = "OPEN SESAME"

    # Generate a message string that can be verified by another computer that knows
    # the shared secret.
    #
    # @param [String] message The message.
    # @param [String] secret The shared secret phrase.
    def self.generate(message, secret =  @@default_secret)
      hash = (Digest::SHA1.new << secret + message).to_s
      message + '-' + hash
    end

    # Verify that the message has not been altered.
    #
    # @param [String] message The message to verify.
    # @param [String] secret The shared secret phrase.
    def self.verify(message, secret = @@default_secret)
      string = message.split /-/
      message.eql? generate(string.first, secret)
    end

    # Verify a message that was generated with OpenSesame and return just the message
    # part.  Returns nil if the message does not verify.
    #
    # @param [String] message The message that was generated by OpenSesame, which includes
    #   a cryptographic hash.
    # @param [String] secret The secret to use for verifying the message.
    def self.message(message, secret = @@default_secret)
      if self.verify(message, secret)
        (message.split /-/).first
      else
        nil
      end
    end

  end

end